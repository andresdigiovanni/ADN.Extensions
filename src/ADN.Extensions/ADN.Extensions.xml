<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADN.Extensions</name>
    </assembly>
    <members>
        <member name="T:ADN.Extensions.ArrayExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.ArrayEqual``1(``0[],``0[])">
            <summary>
            Checks if the Arrays are equal.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="first">The <see cref="T:System.Array"/> that contains data to compare with.</param>
            <param name="second">The <see cref="T:System.Array"/> that contains data to compare to.</param>
            <returns>Returns <c>true</c> if all element match and <c>false</c> otherwise.</returns>
            <example>
            <code lang="csharp">
            var first= new double[] { 0, 0, 0, 0, 0 };
            var second = new double[] { 0, 0, 0, 0, 0 };
            var result = first.ArrayEqual(second);
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            Combine the Arrays.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="first">First element to combine.</param>
            <param name="second">Second element to combine.</param>
            <returns>T[].</returns>
            <example>
            <code lang="csharp">
            var first= new double[] { 0, 1, 2 };
            var second = new double[] { 3, 4, 5 };
            var result = first.Combine(second);
            
            /*
            result contains the values { 0, 1, 2, 3, 4, 5 }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.InsertIntoArray``1(``0[],System.Int32,``0)">
            <summary>
            Inserts an element into the <see cref="T:System.Array"/> at the specified index.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="array">The one-dimensional, zero-based array.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <returns>A reference to the changed array.</returns>
            <example>
            <code lang="csharp">
            var array = new double[] { 1, 2, 3, 4, 5 };
            var result = array.InsertIntoArray(2, 0);
            
            /*
            result contains the values { 1, 2, 0, 3, 4, 5 }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.SetAllValues``1(``0[],``0)">
            <summary>
            Sets all values.
            </summary>
            <typeparam name="T">The type of the elements of the array that will be modified.</typeparam>
            <param name="array">The one-dimensional, zero-based array.</param>
            <param name="value">The value.</param>
            <returns>A reference to the changed array.</returns>
            <example>
            <code lang="csharp">
            var array = new double[] { 0, 0, 0, 0, 0 };
            var result = array.SetAllValues(1);
            
            /*
            result contains the values { 1, 1, 1, 1, 1 }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.SplitByNumberOfDivisions``1(``0[],System.Int32)">
            <summary>
            Split an array into subarrays by specifying the number of divisions.
            </summary>
            <typeparam name="T">The type of the elements of the array that will be split.</typeparam>
            <param name="array">Array to split.</param>
            <param name="numberOfDivisions">Number of divisions.</param>
            <returns>Subarrays.</returns>
            <exception cref="T:System.DivideByZeroException">Number of divisions is zero.</exception>
            <example>
            <code lang="csharp">
            var array = new double[] { 0, 1, 2 };
            var numberOfDivisions = 2;
            var result = array.SplitByNumberOfDivisions(numberOfDivisions);
            
            /*
            result contains the values { { 0, 1 }, { 2 } }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.SplitByNumberOfElementsInDivision``1(``0[],System.Int32)">
            <summary>
            Split an array into subarrays by specifying the number of elements in each division.
            </summary>
            <typeparam name="T">The type of the elements of the array that will be split.</typeparam>
            <param name="array">Array to split.</param>
            <param name="elementsInDivision">Elements in each division.</param>
            <returns>Subarrays.</returns>
            <exception cref="T:System.DivideByZeroException">Number of elements in division is zero.</exception>
            <example>
            <code lang="csharp">
            var array = new double[] { 0, 1, 2 };
            var elementsInDivision = 2;
            var result = array.SplitByNumberOfElementsInDivision(elementsInDivision);
            
            /*
            result contains the values { { 0, 1 }, { 2 } }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ArrayExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Subs the array.
            </summary>
            <typeparam name="T">The type of the elements of the array that will be modified.</typeparam>
            <param name="array">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <returns>T[].</returns>
            <example>
            <code lang="csharp">
            var array = new double[] { 0, 1, 2, 3, 4, 5 };
            var index = 1;
            var length = 4;
            var result = array.SubArray(index, length);
            
            /*
            result contains the values { 1, 2, 3, 4 }
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.Base64Extensions">
            <summary>
            A static class of methods for Base64 strings.
            </summary>
        </member>
        <member name="M:ADN.Extensions.Base64Extensions.Base64Encode(System.String)">
            <summary>
            Converts the value of a plain text string to its equivalent string representation that is encoded with base-64 digits.
            </summary>
            <param name="plainText">Plain text string.</param>
            <returns>String encoded with base-64 digits.</returns>
            <example>
            <code lang="csharp">
            var value = "0123456789";
            var result = value.Base64Encode();
            
            /*
            result is "MDEyMzQ1Njc4OQ=="
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.Base64Extensions.Base64Decode(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent plain text string.
            </summary>
            <param name="base64EncodedData">String encoded with base-64 digits.</param>
            <returns>Plain text string.</returns>
            <example>
            <code lang="csharp">
            var value = "MDEyMzQ1Njc4OQ==";
            var result = value.Base64Decode();
            
            /*
            result is "0123456789"
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.ByteExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Byte"/> <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.ByteExtensions.BytesToHexa(System.Byte[],System.String)">
            <summary>
            Converts the numeric value of a byte array to its equivalent hexadecimal string.
            </summary>
            <param name="bytes">The value.</param>
            <param name="separator">Hexadecimal values separator.</param>
            <returns>Hexadecimal string.</returns>
            <example>
            <code lang="csharp">
            var array = new byte[] { 48, 49, 50, 51, 52 };
            var separator = "-";
            var result = array.BytesToHexa(separator);
            
            /*
            result is "30-31-32-33-34"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ByteExtensions.HexaToBytes(System.String,System.String)">
            <summary>
            Converts the hexadecimal string to its quivalent numeric value byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="separator">Hexadecimal values separator.</param>
            <returns>Byte array.</returns>
            <example>
            <code lang="csharp">
            var value = "30-31-32-33-34";
            var separator = "-";
            var result = value.HexaToBytes(separator);
            
            /*
            result contains the values { 48, 49, 50, 51, 52 }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ByteExtensions.BytesToString(System.Byte[])">
            <summary>
            Decodes a sequence of bytes from the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
            <remarks>Equivalent to System.Text.Encoding.UTF8.GetString().</remarks>
            <example>
            <code lang="csharp">
            var array = new byte[] { 48, 49, 50, 51, 52 };
            var result = array.BytesToString();
            
            /*
            result is "01234"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ByteExtensions.StringToBytes(System.String)">
            <summary>
            Encodes a set of characters into a sequence of bytes.
            </summary>
            <param name="value">The character array containing the characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
            <remarks>Equivalent to System.Text.Encoding.UTF8.GetBytes().</remarks>
            <example>
            <code lang="csharp">
            var value = "01234";
            var result = value.StringToBytes();
            
            /*
            result contains the values { 48, 49, 50, 51, 52 }
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.DataTableExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="T:ADN.Extensions.DataTableExtensions.TableCssClasses">
            <summary>
            CSS classes.
            </summary>
        </member>
        <member name="M:ADN.Extensions.DataTableExtensions.Print(System.Data.DataTable)">
            <summary>
            Convert a DataTable to a formatted string table.
            </summary>
            <param name="dataTable">DataTable to convert.</param>
            <returns>String DataTable.</returns>
        </member>
        <member name="M:ADN.Extensions.DataTableExtensions.ToHtmlTable(System.Data.DataTable,ADN.Extensions.DataTableExtensions.TableCssClasses)">
            <summary>
            Convert a DataTable to the equivalent HTML table.
            </summary>
            <param name="dataTable">DataTable to convert.</param>
            <param name="tableCssClasses">Optional parameter. CSS classes.</param>
            <returns>HTML table.</returns>
            <example>
            <code lang="csharp">
            DataTable table = new DataTable(new DataTableExtensions.TableCssClasses()
            {
                Table = "class-table",
                Tr = "class-tr-1 class-tr-2",
                Th = "class-th",
                Td = "class-td",
            });
            // populate table
            var result = table.ToHtmlTable();
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.DateTimeExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.DateTimeExtensions.DateTimeToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts DateTime to unix time stamp.
            </summary>
            <param name="dateTime">The DateTime.</param>
            <returns>The unix time stamp.</returns>
            <example>
            <code lang="csharp">
            var dateTime = DateTime.Parse("02/16/2008 12:15:12", new CultureInfo("en-US"));
            var result = date.DateTimeToUnixTimeStamp();
            
            /*
            result is 1203164112
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.DateTimeExtensions.UnixTimeStampToDateTime(System.Int64)">
            <summary>
            Converts unix time stamp to DateTime.
            </summary>
            <param name="unixTimestamp">The unix time stamp.</param>
            <returns>The DateTime.</returns>
            <example>
            <code lang="csharp">
            long unixTimestamp = 1203164112;
            var result = unixTimestamp.UnixTimeStampToDateTime().ToString("MM/dd/yyyy HH:mm:ss");
            
            /*
            result is 02/16/2008 12:15:12
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.DateTimeExtensions.TrimTicks(System.DateTime)">
            <summary>
            Returns the DateTime with the ticks trimmed.
            </summary>
            <param name="dateTime">The DateTime.</param>
            <returns>A DateTime with the ticks trimmed.</returns>
            <example>
            <code lang="csharp">
            var dateTime = DateTime.Now.TrimTicks();
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.DateTimeExtensions.TrimMilliseconds(System.DateTime)">
            <summary>
            Returns the DateTime with the milliseconds trimmed.
            </summary>
            <param name="dateTime">The DateTime.</param>
            <returns>A DateTime with the milliseconds trimmed.</returns>
            <example>
            <code lang="csharp">
            var dateTime = DateTime.Now.TrimMilliseconds();
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.DateTimeExtensions.TrimSecondsAndMilliseconds(System.DateTime)">
            <summary>
            Returns a Datetime with the seconds trimmed.
            </summary>
            <param name="dateTime">The DateTime.</param>
            <returns>A DateTime with the seconds trimmed.</returns>
            <example>
            <code lang="csharp">
            var dateTime = DateTime.Now.TrimSecondsAndMilliseconds();
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.DictionaryExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.DictionaryExtensions.RemoveAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Remove all elements in the dictionary that match the predicate.
            </summary>
            <typeparam name="TKey">Dictionary key.</typeparam>
            <typeparam name="TValue">Dictionary value.</typeparam>
            <param name="dict">The dictionary to modify.</param>
            <param name="predicate">The predicate to make the match.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var dictionary = new Dictionary<string, int>]]>
            {
                { "Luke", 1 },
                { "Skywalker", 2 }
            };
            dictionary.RemoveAll(value => value == 2);
            
            /*
            dictionary contains the values [ {"Luke", 1} ]
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.DoubleExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.DoubleExtensions.RoundNumber(System.Double,System.Double)">
            <summary>
            Rounds a value to the nearest integral value with the given step.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="step">Step number to round.</param>
            <returns>The number nearest to value that is multiple of the given step.</returns>
            <example>
            <code lang="csharp">
            double value = 12;
            int step = 5;
            var result = value.RoundNumber(step);
            
            /*
            result is 10
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.DoubleExtensions.RoundNumber(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rounds a value to the nearest integral value with the given step and within the determined range.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="step">Step number to round.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>The number nearest to value that is multiple of the given step and within the determined range.</returns>
            <example>
            <code lang="csharp">
            double value = 12;
            int step = 5;
            int min = 0;
            int max = 20;
            var result = value.RoundNumber(step, min, max);
            
            /*
            result is 10
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.ListExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.IndexOfMax``1(System.Collections.Generic.IList{``0})">
            <summary>
            Find the index of the maximum value of the list.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="values">The list of elements.</param>
            <returns>Index of the maximum value of the list.</returns>
            <example>
            <code lang="csharp">
            var values = new double[] { 10, 11, 12, 13, 12, 11, 10 };
            var result = values.IndexOfMax();
            
            /*
            result is 3
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.IndexOfMin``1(System.Collections.Generic.IList{``0})">
            <summary>
            Find the index of the minimum value of the list.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="values">The list of elements.</param>
            <returns>Index of the minimum value of the list.</returns>
            <example>
            <code lang="csharp">
            var values = new double[] { 13, 12, 11, 10, 11, 12, 13 };
            var result = values.IndexOfMin();
            
            /*
            result is 3
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.IsSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Determine if two sequences contains exactly the same elements.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="first">The first list of elements.</param>
            <param name="second">The second list of elements.</param>
            <returns>True if two sequences contains exactly the same elements, false otherwise.</returns>
            <example>
            <code lang="csharp">
            var first = new double[] { 0, 1 };
            var second = new double[] { 1, 0 };
            var result = first.IsSame(second);
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Median(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets the value of the middle element of the list after sorted.
            </summary>
            <param name="values">The list of elements.</param>
            <returns>Index of the middle element.</returns>
            <example>
            <code lang="csharp">
            var values = new double[] { 2, 3, 5, 1, 4 };
            var result = values.Median();
            
            /*
            result is 3
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Median(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets the value of the middle element of the list after sorted of a given range.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>Index of the middle element.</returns>
            <example>
            <code lang="csharp">
            int start = 0;
            int end = 2;
            var values = new double[] { 2, 3, 5, 1, 4 };
            var result = values.Median();
            
            /*
            result is 2
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Mean(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets the mean of the values of the list.
            </summary>
            <param name="values">The list of elements.</param>
            <returns>Mean of the values.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.Mean();
            
            /*
            result is 4.5
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Mean(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Gets the mean of the values of the list of a given range.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>Mean of the values.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Start or end out of range.</exception>
            <example>
            <code lang="csharp">
            int start = 0;
            int end = 5;
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.Mean(start, end);
            
            /*
            result is 2.5
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Rescale(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Scale a list of double and all the elements with the factor value.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="factor">Scale factor.</param>
            <returns>List of double and all the elements scaled.</returns>
            <example>
            <code lang="csharp">
            double factor = 0.5;
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4 };]]>
            var result = values.Rescale(factor);
            
            /*
            result is { 0, 2, 4 }
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle the elements of the list.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="values">The list of elements.</param>
            <example>
            <code lang="csharp">
            var values = new double[] { 0, 1, 2, 3, 4, 5 };
            values.Shuffle();
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate the standard deviation of the values of the list.
            </summary>
            <param name="values">The list of elements.</param>
            <returns>Standard deviation.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.StandardDeviation();
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.StandardDeviation(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Calculate the standard deviation of the values of the list of a given range.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>Standard deviation.</returns>
            <example>
            <code lang="csharp">
            int start = 0;
            int end = 5;
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.StandardDeviation(start, end);
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate the variance of the values of the list.
            </summary>
            <param name="values">The list of elements.</param>
            <returns>Variance of values.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.Variance();
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Calculate the variance of the values of the list.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="mean">The mean of the values of the list.</param>
            <returns>Variance of values.</returns>
            <example>
            <code lang="csharp">
            double mean = 2.5;
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.Variance(mean);
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.ListExtensions.Variance(System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Calculate the variance of the values of the list of a given range.
            </summary>
            <param name="values">The list of elements.</param>
            <param name="mean">The mean of the values of the list.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>Variance of values.</returns>
            <example>
            <code lang="csharp">
            int start = 0;
            int end = 5;
            double mean = 2.5;
            <![CDATA[var values = new List<double>() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };]]>
            var result = values.Variance(mean, start, end);
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.NumberExtensions">
            <summary>
            A static class of extension methods for numbers.
            </summary>
        </member>
        <member name="M:ADN.Extensions.NumberExtensions.IsNumber(System.Object)">
            <summary>
            Checks if an object is a number type.
            </summary>
            <param name="value"></param>
            <returns>True if the object is a number type.</returns>
            <example>
            <code lang="csharp">
            double value = 42;
            var result = value.IsNumber();
            
            /*
            result is True
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.ObjectExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            Clone a serializable object.
            </summary>
            <param name="source">Object to clone.</param>
            <returns>A clone of the object.</returns>
            <example>
            <code lang="csharp">
            var person1 = new Person()
            {
                FirstName = "Luke",
                LastName = "Skywalwer"
            };
            var person2 = person1.DeepClone();
            </code>
            </example>
        </member>
        <member name="T:ADN.Extensions.StringExtensions">
            <summary>
            A static class of extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.IsAlphaNumeric(System.String)">
            <summary>
            Check if a string is alphanumeric.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if the string is alphanumeric, false otherwise.</returns>
            <example>
            <code lang="csharp">
            var value = "abc1234";
            var result = value.IsAlphaNumeric();
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
            Check if a string is a valid email.
            </summary>
            <param name="str">String to check.</param>
            <returns>True if the string is a valid email, false otherwise.</returns>
            <example>
            <code lang="csharp">
            var value = "austin.powers@example.com";
            var result = value.IsValidEmailAddress();
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="str">String expression from which the leftmost characters are returned.</param>
            <param name="length">Numeric expression indicating how many characters to return.</param>
            <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
            <example>
            <code lang="csharp">
            var value = "abcdefghij";
            var length = 5;
            var result = value.Left(length);
            
            /*
            result is "abcde"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.Mid(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a string that contains a specified number of characters starting from a specified position in a string.
            </summary>
            <param name="str">String expression from which characters are returned.</param>
            <param name="startIndex">Starting position of the characters to return.</param>
            <param name="length">Number of characters to return.</param>
            <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
            <example>
            <code lang="csharp">
            var value = "abcdefghij";
            var startIndex = 3;
            var length = 5;
            var result = value.Mid(startIndex, length);
            
            /*
            result is "defgh"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="str">String expression from which the rightmost characters are returned.</param>
            <param name="length">Numeric expression indicating how many characters to return.</param>
            <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
            <example>
            <code lang="csharp">
            var value = "abcdefghij";
            var length = 5;
            var result = value.Right(length);
            
            /*
            result is "fghij"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.PadCenter(System.String,System.Int32)">
            <summary>
            Returns a padding center string.
            </summary>
            <param name="str">String to pad center.</param>
            <param name="maxLength">Maximum length of space to fill.</param>
            <returns>Pad center string.</returns>
            <example>
            <code lang="csharp">
            var value = "abc";
            var maxLength = 5;
            var result = value.PacCenter(maxLength);
            
            /*
            result is " abc "
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.TrimNonPrintableAscii(System.String)">
            <summary>
            Returns a string without the non-printable ASCII characters from a string (characters between space and tilde).
            </summary>
            <param name="str">String to remove the non-printable ASCII characters.</param>
            <returns>A string without the non-printable ASCII characters from a string (characters between space and tilde).</returns>
            <example>
            <code lang="csharp">
            var str = (char)0x12 + " a~";
            var result = str.TrimNonPrintableAscii();
            
            /*
            result is " a~"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.FromHex(System.String)">
            <summary>
            Converts a hexadecimal string to unicode string.
            </summary>
            <param name="str">Hexadecimal string.</param>
            <returns>Unicode string.</returns>
            <example>
            <code lang="csharp">
            var value = "4C6F72656D20497073756D";
            var result = value.FromHex();
            
            /*
            result is "Lorem Ipsum"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Extensions.StringExtensions.ToHex(System.String)">
            <summary>
            Converts a unicode string to hexadecimal string.
            </summary>
            <param name="str">Unicode string.</param>
            <returns>Hexadecimal string.</returns>
            <example>
            <code lang="csharp">
            var value = "Lorem Ipsum";
            var result = value.ToHex();
            
            /*
            result is "4C6F72656D20497073756D"
            */
            </code>
            </example>
        </member>
    </members>
</doc>
